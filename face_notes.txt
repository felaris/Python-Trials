Introduction
Did you know that every time you upload a photo to Facebook, the platform uses facial recognition algorithms to identify the people in that image? Or that certain governments around the world use face recognition technology to identify and catch criminals? I don’t need to tell you that you can now unlock smartphones with your face!

The applications of this sub-domain of computer vision are vast and businesses around the world are already reaping the benefits. The usage of face recognition models is only going to increase in the next few years so why not teach yourself how to build one from scratch?



In this article, we are going to do just that. We will first understand the inner workings of face recognition, and then take a simple case study and implement it in Python. By the end of the article you will have built your very first facial recognition model!

 

Table of Contents
Understanding how Face Recognition works
Case Study
Implementation in Python
Understanding the Python code
Applications of Facial Recognition Algorithms
 

Understanding how Face Recognition works
In order to understand how Face Recognition works, let us first get an idea of the concept of a feature vector.

Every Machine Learning algorithm takes a dataset as input and learns from this data. The algorithm goes through the data and identifies patterns in the data. For instance, suppose we wish to identify whose face is present in a given image, there are multiple things we can look at as a pattern:

Height/width of the face.
Height and width may not be reliable since the image could be rescaled to a smaller face. However, even after rescaling, what remains unchanged are the ratios – the ratio of height of the face to the width of the face won’t change.
Color of the face.
Width of other parts of the face like lips, nose, etc.
Clearly, there is a pattern here – different faces have different dimensions like the ones above. Similar faces have similar dimensions. The challenging part is to convert a particular face into numbers – Machine Learning algorithms only understand numbers. This numerical representation of a “face” (or an element in the training set) is termed as a feature vector. A feature vector comprises of various numbers in a specific order.

As a simple example, we can map a “face” into a feature vector which can comprise various features like:

Height of face (cm)
Width of face (cm)
Average color of face (R, G, B)
Width of lips (cm)
Height of nose (cm)
Essentially, given an image, we can map out various features and convert it into a feature vector like:

Height of face (cm)	Width of face (cm)	Average color of face (RGB)	Width of lips (cm)	Height of nose (cm)
23.1	15.8	(255, 224, 189)	5.2	4.4
 

So, our image is now a vector that could be represented as (23.1, 15.8, 255, 224, 189, 5.2, 4.4). Of course there could be countless other features that could be derived from the image (for instance, hair color, facial hair, spectacles, etc). However, for the example, let us consider just these 5 simple features.

Now, once we have encoded each image into a feature vector, the problem becomes much simpler. Clearly, when we have 2 faces (images) that represent the same person, the feature vectors derived will be quite similar. Put it the other way, the “distance” between the 2 feature vectors will be quite small.

Machine Learning can help us here with 2 things:

Deriving the feature vector: it is difficult to manually list down all of the features because there are just so many. A Machine Learning algorithm can intelligently label out many of such features. For instance, a complex features could be: ratio of height of nose and width of forehead. Now it will be quite difficult for a human to list down all such “second order” features.
Matching algorithms: Once the feature vectors have been obtained, a Machine Learning algorithm needs to match a new image with the set of feature vectors present in the corpus.
Now that we have a basic understanding of how Face Recognition works, let us build our own Face Recognition algorithm using some of the well-known Python libraries.

 

Case Study
We are given a bunch of faces – possibly of celebrities like Mark Zuckerberg, Warren Buffett, Bill Gates, Shah Rukh Khan, etc. Call this bunch of faces as our “corpus”. Now, we are given image of yet another celebrity (“new celebrity”). The task is simple – identify if this “new celebrity” is among those present in the “corpus”.

Here are some of the images in the corpus:



As you can see, we have celebrities like Barack Obama, Bill Gates, Jeff Bezos, Mark Zuckerberg, Ray Dalio and Shah Rukh Khan.

Now, here is the “new celebrity”:



Note: all of the above images have been taken from Google images.

It is obvious that this is Shah Rukh Khan. However, for a computer this is a challenging task. The challenge is because of the fact that for us humans, it is easy to combine so many features of the images to see which one is which celebrity. However, for a computer, it isn’t straightforward to learn how to recognize these faces.

There is an amazingly simple Python library that encapsulates all of what we learn above – creating feature vectors out of faces and knowing how to differentiate across faces. This Python library is called as face_recognition and deep within, it employs dlib – a modern C++ toolkit that contains several machine learning algorithms that help in writing sophisticated C++ based applications.

face_recognition library in Python can perform a large number of tasks:

Find all the faces in a given image
Find and manipulate facial features in an image
Identify faces in images
Real-time face recognition
Here, we will talk about the 3rd use case – identify faces in images.

You can find the source code of face_recognition library here on Github: https://github.com/ageitgey/face_recognition.

In fact, there is also a tutorial on how to install face_recognition library: https://github.com/ageitgey/face_recognition#installation-options. Before you install face_recognition, you need to install dlib as well. You can find the instructions to install dlib over here: https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf.

 

Implementation in Python
This section contains the code for a building a straightforward face recognition system using the face_recognition library. This is the implementation part, we will go through the code to understand it in more detail in the next section.

# import the libraries
import os
import face_recognition

# make a list of all the available images
images = os.listdir('images')

# load your image
image_to_be_matched = face_recognition.load_image_file('my_image.jpg')

# encoded the loaded image into a feature vector
image_to_be_matched_encoded = face_recognition.face_encodings(
    image_to_be_matched)[0]

# iterate over each image
for image in images:
    # load the image
    current_image = face_recognition.load_image_file("images/" + image)
    # encode the loaded image into a feature vector
    current_image_encoded = face_recognition.face_encodings(current_image)[0]
    # match your image with the image and check if it matches
    result = face_recognition.compare_faces(
        [image_to_be_matched_encoded], current_image_encoded)
    # check if it was a match
    if result[0] == True:
        print "Matched: " + image
    else:
        print "Not matched: " + image
The folder structure is as follows:

facialrecognition:

fr.py
my_image.jpg
images/
barack_obama.jpg
bill_gates.jpg
jeff_bezos.jpg
mark_zuckerberg.jpg
ray_dalio.jpg
shah_rukh_khan.jpg
warren_buffett.jpg
Our root directory, facialrecognition contains:

Our face recognition code above in the form of fr.py.
my_image.jpg – the image to be recognized (“new celebrity”).
images/ – the “corpus”.
When you create the folder structure as above and run the above code, here is what you get as the output:

Matched: shah_rukh_khan.jpg
Not matched: warren_buffett.jpg
Not matched: barack_obama.jpg
Not matched: ray_dalio.jpg
Not matched: bill_gates.jpg
Not matched: jeff_bezos.jpg
Not matched: mark_zuckerberg.jpg
Clearly, the “new celebrity” is Shah Rukh Khan and our face recognition system is able to detect it!

 

Understanding the Python code
Now, let us go through the code to understand how it works:

# import the libraries
import os
import face_recognition
These are simply the imports. We will be using the built-in os library to read all the images in our corpus and we will use face_recognition for the purpose of writing the algorithm.

# make a list of all the available images
images = os.listdir('images')
This simple code helps us identify the path of all of the images in the corpus. Once this line is executed, we will have:

images = ['shah_rukh_khan.jpg', 'warren_buffett.jpg', 'barack_obama.jpg', 'ray_dalio.jpg', 'bill_gates.jpg', 'jeff_bezos.jpg', 'mark_zuckerberg.jpg']
Now, the code below loads the new celebrity’s image:

# load your image
image_to_be_matched = face_recognition.load_image_file('my_image.jpg')
To make sure that the algorithms are able to interpret the image, we convert the image to a feature vector:

# encoded the loaded image into a feature vector

image_to_be_matched_encoded = face_recognition.face_encodings(

    image_to_be_matched)[0]
The rest of the code now is fairly easy:

# iterate over each image
for image in images:
    # load the image
    current_image = face_recognition.load_image_file("images/" + image)

    # encode the loaded image into a feature vector
    current_image_encoded = face_recognition.face_encodings(current_image)[0]

    # match your image with the image and check if it matches
    result = face_recognition.compare_faces(
        [image_to_be_matched_encoded], current_image_encoded)

    # check if it was a match
    if result[0] == True:
        print "Matched: " + image
    else:
        print "Not matched: " + image
Here, we are:

Looping over each image.
Encoding the image into a feature vector.
Comparing the loaded image with the image to be recognized.
If it is a match, we print that. If it is a mismatch, we print that as well.
The output as shown above clearly suggests that this simple face recognition algorithm works amazingly well. Let us try replacing my_image with another image:



When you run the algorithm again, you will see the following output:

Not matched: shah_rukh_khan.jpg
Not matched: warren_buffett.jpg
Not matched: barack_obama.jpg
Not matched: ray_dalio.jpg
Not matched: bill_gates.jpg
Not matched: jeff_bezos.jpg
Not matched: mark_zuckerberg.jpg
Clearly, the system did not identify Jack Ma as any of the above celebrities. This indicates that our algorithm is quite good in both:

Correctly identifying those that are present in the corpus
Flagging a mismatch for those that are not present in the corpus
 

Face Recognition Applications
Face Recognition is a well researched problem and is widely used in both industry and in academia. As an example, a criminal in China was caught because a Face Recognition system in a mall detected his face and raised an alarm. Clearly, Face Recognition can be used to mitigate crime. There are many other interesting use cases of Face Recognition:

Facial Authentication: Apple has brought in Face ID for Facial Authentication in iPhones. Some of the leading banks are trying to use Facial Authentication for lockers.
Customer Service: Some of the banks in Malaysia have installed systems which use Face Recognition to detect valuable customers of the bank so that the bank can provide the personalized service. This way, banks are able to generate more revenues by retaining such customers and keeping them happy.
Insurance Underwriting: Many insurance companies are using Face Recognition to match the face of the person with that provided in the photo ID proof. This way, the underwriting process becomes much faster.
 

End Notes
To summarize, Face Recognition is an interesting problem with lots of powerful use cases which can significantly help society across various dimensions. While there will always be an ethical risk attached to commercialzing such techniques, that is a debate we will shelve for another time.

I hope you found this article useful. Please provide you feedback and suggestions in the comments section below!

 

About the author
Aman Goel – Co-Founder and CEO at AllinCall Research & Solutions
Aman Goel is an IIT-Bombay Alumnus and is an entrepreneur, coder, and a fan of air crash investigation. He writes programming blogs for Hackr.io, a programming community to find the best programming tutorials. He is a co-founder at AllinCall Research & Solutions and loves helping people in cracking IIT JEE problems.
You can also read this article on Analytics Vidhya's Android APP Get it on Google Play
Related Articles













Face Recognition
Recognize and manipulate faces from Python or from the command line with
the world’s simplest face recognition library.
Built using dlib’s state-of-the-art face recognition
built with deep learning. The model has an accuracy of 99.38% on the
Labeled Faces in the Wild benchmark.
This also provides a simple face_recognition command line tool that lets
you do face recognition on a folder of images from the command line!
PyPI
Build Status
Documentation Status
Features
Find faces in pictures
Find all the faces that appear in a picture:

image3

import face_recognition
image = face_recognition.load_image_file("your_file.jpg")
face_locations = face_recognition.face_locations(image)
Find and manipulate facial features in pictures
Get the locations and outlines of each person’s eyes, nose, mouth and chin.

image4

import face_recognition
image = face_recognition.load_image_file("your_file.jpg")
face_landmarks_list = face_recognition.face_landmarks(image)
Finding facial features is super useful for lots of important stuff. But you can also use for really stupid stuff
like applying digital make-up (think ‘Meitu’):
image5

Identify faces in pictures
Recognize who appears in each photo.

image6

import face_recognition
known_image = face_recognition.load_image_file("biden.jpg")
unknown_image = face_recognition.load_image_file("unknown.jpg")

biden_encoding = face_recognition.face_encodings(known_image)[0]
unknown_encoding = face_recognition.face_encodings(unknown_image)[0]

results = face_recognition.compare_faces([biden_encoding], unknown_encoding)
You can even use this library with other Python libraries to do real-time face recognition:

image7

See this example for the code.

Installation
Requirements
Python 3.3+ or Python 2.7
macOS or Linux (Windows not officially supported, but might work)
Installing on Mac or Linux
First, make sure you have dlib already installed with Python bindings:

How to install dlib from source on macOS or Ubuntu
Then, install this module from pypi using pip3 (or pip2 for Python 2):

pip3 install face_recognition
If you are having trouble with installation, you can also try out a
pre-configured VM.
Installing on Raspberry Pi 2+
Raspberry Pi 2+ installation instructions
Installing on Windows
While Windows isn’t officially supported, helpful users have posted instructions on how to install this library:

@masoudr’s Windows 10 installation guide (dlib + face_recognition)
Installing a pre-configured Virtual Machine image
Download the pre-configured VM image (for VMware Player or VirtualBox).
Usage






A Beginners guide to Building your own Face Recognition System to creep out your Friends
Rachel Smith
Rachel Smith
Follow
Sep 30, 2019 · 5 min read



Facial recognition systems are steadily making their way into our everyday lives. Built on AI, they can (with varying degrees of accuracy) pick you out of a crowd and identify you as an individual leading to all manner of consequences. Depending on where you live in the world, they are able to unlock your phone screen, pay for your chicken, get you arrested, keep you away from Taylor Swift and find your dream guy.

A toilet paper dispenser at a public toilet in Beijing deploys facial recognition to stop toilet paper thieves (Image source: AFP)

Poster for Metropolitan Police Facial Recognition trial in Central London (Image Source: Metropolitan Police)

Dating app Badoo showing profile matches for Jake Gyllenhall and Kendall Jenner (Image Source: Badoo)
But how do these systems actually work, how accurate are they and who has permission to deploy them? To find out, let’s make one ourselves using free, open source software and pictures of friends.

Setting it up — downloading everything we need for the programme to run
Download the text editor Sublime Text and when it has finished, open it up and follow the installation instructions. This is where we will write the code which will become the programme.
Check to see if you already have Python 3 on your computer. This is the programming language that we will write in. To do this for Macs open Terminal (in the Utilities folder in Applications) or for Windows open Command Prompt (press Windows + X and select Command Prompt). Then type the following and press enter:
python3 -- version
if it says Python 3.7.3, ignore step 3. Otherwise continue.
3. Download Python 3. For Windows, when the download has finished, open up the python.exe file and under the ‘Modify’ menu, make sure ‘pip’ and ‘Add Python to environment variables’ is ticked and then press ‘install’.
4. Go to Terminal or Command Prompt again and type the following, pressing enter after each line to install the packages we need. The fourth line ‘dlib’ may take a while.
pip3 install cmake
pip3 install face_recognition
pip3 install numpy
pip3 install dlib
pip3 install opencv-python
If the final command asked you to install Xcode (for Macs), go to the App Store and install. This may take a while as it is quite large. Then re-type the last line (pip3 install opencv-python) and press enter.
Making and Running the Programme
1. Copy and paste this open source piece of code into Sublime Text. It may be easier to click ‘view raw’ at the bottom of the image to do this.

2. Save this file in the Desktop folder on your computer as recognise_face.py and create a folder called known_people (make sure this is also in the Desktop folder).
3. Now we can add pictures of people we wish to identify by saving an image of their face in the known_people folder. Make sure the person is facing forwards and is the only person in the photograph (crop if necessary). We name each file as the person’s name, as we wish it to appear on screen. In this case, only the .jpg files will be used.

4. Now we can run the programme by going back to the Terminal (Mac) or Command Prompt (Windows), writing the following and pressing enter
cd Desktop
python3 recognise_face.py
if an error message appears try:
python recognise_face.py
Pressing Ctrl + c with the Terminal window selected will exit the programme.
What is happening here?
This blog post by Adam Geitgey explains in detail how this system works (and is very good).
To summarise, the face recognition process can be broken down into four steps.
Detect any faces which appear in the frame.

A Visualisation of a History of Gradients (HOG) algorithm for detecting faces
2. Locate specific points on the face, for example the tip of the nose and the corners of each eye to create a mask. Then move that mask so that it is facing straight ahead using only transformations that preserve the original shape e.g rotation and zooming.

Face goes through transforms to become aligned
3. Encoding. This stage is about identifying key parts of a face (through the eyes of a computer) that will be similar for any photo of the same person and different for an image of anybody else. For humans this may be eye colour, hair style, nose shape etc but for computer vision, there is a highly effective set of 128 measurements for each face known as an embedding. These measurements have been found using machine learning by comparing thousands of images of labeled faces. We can then access a pre-trained network generated by this process to find the measurements we need.

128 measurements to identify my face
4. Compare the 128 measurements from the faces detected in step 1 to all of those from the images in the known_people folder. If a similar enough set of measurements is found in this folder, it’s a match!
How accurate is this?
With a set of around 30 faces to recognise, this method holds up well. But what about if you were to scrape a picture of every one of your Facebook friends? Since the average user has 338 of them, this is a much larger set for comparison and would surely lead to ambiguity? In the next blog post, we will test this out, consider the legalities of making and utilising such an application and look further in to current applications of face recognition technology.





Command-Line Interface
When you install face_recognition, you get a simple command-line program
called face_recognition that you can use to recognize faces in a
photograph or folder full for photographs.
First, you need to provide a folder with one picture of each person you
already know. There should be one image file for each person with the
files named according to who is in the picture:
known

Next, you need a second folder with the files you want to identify:

unknown

Then in you simply run the command face_recognition, passing in
the folder of known people and the folder (or single image) with unknown
people and it tells you who is in each image:
$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/

/unknown_pictures/unknown.jpg,Barack Obama
/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person
There’s one line in the output for each face. The data is comma-separated
with the filename and the name of the person found.
An unknown_person is a face in the image that didn’t match anyone in
your folder of known people.
ADJUSTING TOLERANCE / SENSITIVITY
If you are getting multiple matches for the same person, it might be that
the people in your photos look very similar and a lower tolerance value
is needed to make face comparisons more strict.
You can do that with the --tolerance parameter. The default tolerance
value is 0.6 and lower numbers make face comparisons more strict:
$ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/

/unknown_pictures/unknown.jpg,Barack Obama
/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person
If you want to see the face distance calculated for each match in order
to adjust the tolerance setting, you can use --show-distance true:
$ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/

/unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785
/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None
MORE EXAMPLES
If you simply want to know the names of the people in each photograph but don’t
care about file names, you could do this:
$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2

Barack Obama
unknown_person
SPEEDING UP FACE RECOGNITION
Face recognition can be done in parallel if you have a computer with
multiple CPU cores. For example if your system has 4 CPU cores, you can
process about 4 times as many images in the same amount of time by using
all your CPU cores in parallel.
If you are using Python 3.4 or newer, pass in a --cpus <number_of_cpu_cores_to_use> parameter:

$ face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/
You can also pass in --cpus -1 to use all CPU cores in your system.

Python Module
You can import the face_recognition module and then easily manipulate
faces with just a couple of lines of code. It’s super easy!
API Docs: https://face-recognition.readthedocs.io.

AUTOMATICALLY FIND ALL THE FACES IN AN IMAGE
import face_recognition

image = face_recognition.load_image_file("my_picture.jpg")
face_locations = face_recognition.face_locations(image)

# face_locations is now an array listing the co-ordinates of each face!
See this example
to try it out.
You can also opt-in to a somewhat more accurate deep-learning-based face detection model.

Note: GPU acceleration (via nvidia’s CUDA library) is required for good
performance with this model. You’ll also want to enable CUDA support
when compliling dlib.
import face_recognition

image = face_recognition.load_image_file("my_picture.jpg")
face_locations = face_recognition.face_locations(image, model="cnn")

# face_locations is now an array listing the co-ordinates of each face!
See this example
to try it out.
If you have a lot of images and a GPU, you can also
find faces in batches.
AUTOMATICALLY LOCATE THE FACIAL FEATURES OF A PERSON IN AN IMAGE
import face_recognition

image = face_recognition.load_image_file("my_picture.jpg")
face_landmarks_list = face_recognition.face_landmarks(image)

# face_landmarks_list is now an array with the locations of each facial feature in each face.
# face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.
See this example
to try it out.
RECOGNIZE FACES IN IMAGES AND IDENTIFY WHO THEY ARE
import face_recognition

picture_of_me = face_recognition.load_image_file("me.jpg")
my_face_encoding = face_recognition.face_encodings(picture_of_me)[0]

# my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!

unknown_picture = face_recognition.load_image_file("unknown.jpg")
unknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]

# Now we can see the two face encodings are of the same person with `compare_faces`!

results = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)

if results[0] == True:
    print("It's a picture of me!")
else:
    print("It's not a picture of me!")
See this example
to try it out.
Python Code Examples
All the examples are available here.

Face Detection
Find faces in a photograph
Find faces in a photograph (using deep learning)
Find faces in batches of images w/ GPU (using deep learning)
Facial Features
Identify specific facial features in a photograph
Apply (horribly ugly) digital make-up
Facial Recognition
Find and recognize unknown faces in a photograph based on photographs of known people

Compare faces by numeric face distance instead of only True/False matches

Recognize faces in live video using your webcam - Simple / Slower Version (Requires OpenCV to be installed)

Recognize faces in live video using your webcam - Faster Version (Requires OpenCV to be installed)

Recognize faces in a video file and write out new video file (Requires OpenCV to be installed)

Recognize faces on a Raspberry Pi w/ camera

Run a web service to recognize faces via HTTP (Requires Flask to be installed)

Recognize faces with a K-nearest neighbors classifier

How Face Recognition Works

If you want to learn how face location and recognition work instead of
depending on a black box library, read my article.
Caveats
The face recognition model is trained on adults and does not work very well on children. It tends to mix up children quite easy using the default comparison threshold of 0.6.
Deployment to Cloud Hosts (Heroku, AWS, etc)
Since face_recognition depends on dlib which is written in C++, it can be tricky to deploy an app
using it to a cloud hosting provider like Heroku or AWS.
To make things easier, there’s an example Dockerfile in this repo that shows how to run an app built with
face_recognition in a Docker container. With that, you should be able to deploy
to any service that supports Docker images.
Common Issues
Issue: Illegal instruction (core dumped) when using face_recognition or running examples.

Solution: dlib is compiled with SSE4 or AVX support, but your CPU is too old and doesn’t support that.
You’ll need to recompile dlib after making the code change outlined here.
Issue: RuntimeError: Unsupported image type, must be 8bit gray or RGB image. when running the webcam examples.

Solution: Your webcam probably isn’t set up correctly with OpenCV. Look here for more.

Issue: MemoryError when running pip2 install face_recognition

Solution: The face_recognition_models file is too big for your available pip cache memory. Instead,
try pip2 --no-cache-dir install face_recognition to avoid the issue.
Issue: AttributeError: 'module' object has no attribute 'face_recognition_model_v1'

Solution: The version of dlib you have installed is too old. You need version 19.7 or newer. Upgrade dlib.

Issue: Attribute Error: 'Module' object has no attribute 'cnn_face_detection_model_v1'

Solution: The version of dlib you have installed is too old. You need version 19.7 or newer. Upgrade dlib.

Issue: TypeError: imread() got an unexpected keyword argument 'mode'

Solution: The version of scipy you have installed is too old. You need version 0.17 or newer. Upgrade scipy.


